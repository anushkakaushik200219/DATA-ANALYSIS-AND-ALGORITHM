#include <cstring>
#include <iostream>
using namespace std;

#define INF 9999999

// number of vertices in grapj


// create a 2d array of size 5x5
//for adjacency matrix to represent graph
int main() {
  int V;
  int sum=0;
  cin>>V;
  int G[V][V];
  for(int i=0;i<V;i++){
      for(int j=0;j<V;j++){
          cin>>G[i][j];
      }
  }
  int no_edge;

  int selected[V];
  memset(selected, false, sizeof(selected));
  no_edge = 0;
  selected[0] = true;

  int x;
  int y;
  while (no_edge < V-1 ) {
    int min = INF;
    x = 0;
    y = 0;

    for (int i = 0; i < V; i++) {
      if (selected[i]) {
        for (int j = 0; j < V ;j++) {
          if (!selected[j] && G[i][j]) {  // not in selected and there is an edge
            if (min > G[i][j]) {
              min = G[i][j];
              x = i;
              y = j;
            }
          }
        }
      }
    }
    cout << x << " - " << y << " :  " << G[x][y];
    sum+=G[x][y];
    cout<<endl;
    selected[y] = true;
    no_edge++;
  }
  cout <<"Minimum Spanning Weight: "<< sum;
  return 0;
}
/*
Graph g(7);
	 g.addEdge(1,3,7);
     g.addEdge(1,4,5);
     g.addEdge(2,3,8);
     g.addEdge(2,4,5);
     g.addEdge(3,1,7);
  g.addEdge(3,2,8);
     g.addEdge(3,4,9);
     g.addEdge(3,5,7);
     g.addEdge(4,1,5);
  g.addEdge(4,3,9);
     g.addEdge(4,5,15);
     g.addEdge(4,6,6);
     g.addEdge(5,2,5);
     g.addEdge(5,3,7);
  g.addEdge(5,4,15);
     g.addEdge(5,6,8);
     g.addEdge(5,7,9);
     g.addEdge(6,4,6);
     g.addEdge(6,5,8);
  g.addEdge(6,7,11);
     g.addEdge(7,5,9);
  g.addEdge(7,6,11);
  */
